---
title: "Emu Abundance estimator"
format: html
editor: visual
---

Function to read and process emu files

```{r, warning = F, message = F}

library(readr)
library(dplyr)
library(tidyr)

# Function to read and process emu files
process_file <- function(file_path, file_prefix) {
  df <- read_tsv(file_path, col_types = cols(
    tax_id = col_double(),
    abundance = col_double(),
    lineage = col_character(),
    `estimated counts` = col_double()
  ))
  
  # Remove the last two rows
  df <- df %>% slice(1:(n() - 2))
  
  df <- df %>%
    group_by(tax_id) %>%
    summarise(`estimated counts` = sum(`estimated counts`)) %>%
    mutate(`estimated counts` = round(`estimated counts`)) %>%
    rename(!!file_prefix := `estimated counts`)
  
  return(df)
}
```

#### Set2

Process set2 result files

```{r, warning = F, message = F}
# Get list of file paths
file_paths <- list.files(path = "data/emu2/", pattern = "*.tsv", full.names = TRUE)

# Extract file prefixes from file names
file_prefixes <- sapply(strsplit(basename(file_paths), "_"), `[`, 1)

# Read and process all files
data_list <- mapply(process_file, file_paths, file_prefixes, SIMPLIFY = FALSE)

# Merge all dataframes by tax_id
result_df <- Reduce(function(x, y) dplyr::full_join(x, y, by = "tax_id"), data_list)

# Replace NA with 0
result_df[is.na(result_df)] <- 0

# Convert decimal separator from dot to comma
result_df <- result_df %>%
  mutate(across(where(is.numeric), ~ format(.x, decimal.mark = ",")))
```

Result is estimated counts table of 92 taxa

Read silva taxonomy file, fetch lineage, split lineage to taxonomic rank columns and replace empty string with NA

```{r, warning = F, message = F}
taxonomydb <- read_tsv("data/taxonomy.tsv", show_col_types = F)
taxonomydb$tax_id <- as.integer(as.character(taxonomydb$tax_id))
matches <- list(result_df$tax_id)
taxtable <- data.frame(tax_id = result_df$tax_id)
taxtable$tax_id <- as.integer(as.character(taxtable$tax_id))
taxtable <- taxtable %>% dplyr::left_join(taxonomydb, by = "tax_id")
# Split the 'lineage' column by semicolons
taxtable <- taxtable %>%
  separate(lineage, into = c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species"), sep = ";", fill = "right")
# Replace empty strings with NA
taxtable[taxtable == ""] <- NA
```

Create TSE object from data and save it to tse_emu.rds

```{r, message = F, warning = F}
counts <- result_df
counts <- column_to_rownames(counts, "tax_id")
counts[] <- lapply(counts, as.integer)
counts <- as.matrix(counts)
ASV_names <- paste0("ASV", seq(nrow(counts)))
rownames(counts) <- NULL
#Preparing taxonomy
taxonomy <- taxtable
taxonomy <- taxonomy[,-1]
#rownames(taxonomy) <- NULL
#Metadata
metadata <- read_tsv("set2/metadata_dada.tsv", show_col_types = F)
metadata <- column_to_rownames(metadata, "Sampleid")
rownames(metadata) <- NULL
tse_emu <- TreeSummarizedExperiment(assays = list(counts = counts),
                                     rowData = DataFrame(taxonomy),
                                     colData = DataFrame(metadata))
rownames(tse_emu) <- ASV_names 
tse_emu
saveRDS(tse_emu, "set2/tse_emu.rds")
```

#### Set1

Process set1 files

```{r, warning = F, message = F}
# Get list of file paths
file_paths <- list.files(path = "data/emu1/", pattern = "*.tsv", full.names = TRUE)

# Extract file prefixes from file names
file_prefixes <- sapply(strsplit(basename(file_paths), "_"), `[`, 1)

# Read and process all files
data_list <- mapply(process_file, file_paths, file_prefixes, SIMPLIFY = FALSE)

# Merge all dataframes by tax_id
result_df <- Reduce(function(x, y) dplyr::full_join(x, y, by = "tax_id"), data_list)

# Replace NA with 0
result_df[is.na(result_df)] <- 0

# Convert decimal separator from dot to comma
result_df <- result_df %>%
  mutate(across(where(is.numeric), ~ format(.x, decimal.mark = ",")))
```

Result is estimated counts table of 37 taxa

Read silva taxonomy file, fetch lineage, split lineage to taxonomic rank columns and replace empty string with NA

```{r, warning = F, message = F}
taxonomydb <- read_tsv("data/taxonomy.tsv", show_col_types = F)
taxonomydb$tax_id <- as.integer(as.character(taxonomydb$tax_id))
matches <- list(result_df$tax_id)
taxtable <- data.frame(tax_id = result_df$tax_id)
taxtable$tax_id <- as.integer(as.character(taxtable$tax_id))
taxtable <- taxtable %>% dplyr::left_join(taxonomydb, by = "tax_id")
# Split the 'lineage' column by semicolons
taxtable <- taxtable %>%
  separate(lineage, into = c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species"), sep = ";", fill = "right")
# Replace empty strings with NA
taxtable[taxtable == ""] <- NA
```

Create TSE object from data and save it to tse_emu.rds

```{r, message = F, warning = F}
counts <- result_df
counts <- column_to_rownames(counts, "tax_id")
counts[] <- lapply(counts, as.integer)
counts <- as.matrix(counts)
ASV_names <- paste0("ASV", seq(nrow(counts)))
rownames(counts) <- NULL
#Preparing taxonomy
taxonomy <- taxtable
taxonomy <- taxonomy[,-1]
#rownames(taxonomy) <- NULL
#Metadata
metadata <- read_tsv("set1/metadata_dada.tsv", show_col_types = F)
metadata <- column_to_rownames(metadata, "Sampleid")
rownames(metadata) <- NULL
tse_emu <- TreeSummarizedExperiment(assays = list(counts = counts),
                                     rowData = DataFrame(taxonomy),
                                     colData = DataFrame(metadata))
rownames(tse_emu) <- ASV_names 
tse_emu
saveRDS(tse_emu, "set1/tse_emu.rds")
```
