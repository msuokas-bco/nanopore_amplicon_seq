---
title: "Microbial community analysis in R"
author: "Marko Suokas"
format: pdf
pdf-engine: lualatex
editor: visual
mainfont: Aptos
monofont: PT Mono
always_allow_html: yes
header-includes:
   \usepackage[dvipsnames]{xcolor}
   \definecolor{teal}{rgb}{0.0, 0.5, 0.5}
   \definecolor{ivory}{rgb}{1.0, 1.0, 0.94}
---

```{r, include=F}
# This will allow to use different font sizes inside code chunks
# Won't be included in the report
def.chunk.hook  <- knitr::knit_hooks$get("chunk")
knitr::knit_hooks$set(chunk = function(x, options) {
  x <- def.chunk.hook(x, options)
  ifelse(options$size != "normalsize", paste0("\n \\", options$size,"\n\n", x, "\n\n \\normalsize"), x)
})
```

#### Libraries

```{r, warning = F, message = F, size = "tiny"}
library(tidyverse);packageVersion("tidyverse")
library(kableExtra);packageVersion("kableExtra")
library(patchwork);packageVersion("patchwork")
library(mia);packageVersion("mia")
library(ggplot2);packageVersion("ggplot2")
library(ggthemes);packageVersion("ggthemes")
```

Reload tse objects

```{r, warning = F, message = F, size = "tiny"}
tse_dada <- readRDS("set1/tse_dada.rds")
tse_vs97 <- readRDS("set1/tse_vs97.rds")
tse_vs99 <- readRDS("set1/tse_vs99.rds")
tse_emu <- readRDS("set1/tse_emu.rds")
```

\newpage

Agglomerate data to genus level

```{r, warning = F, message = F, size = "tiny"}
#agglomeration to genus level
tse_dada<- agglomerateByRank(tse_dada, rank = "Genus", onRankOnly = T,
                           na.rm = F)
tse_vs97 <- agglomerateByRank(tse_vs97, rank = "Genus", onRankOnly = T,
                          na.rm = F)
tse_vs99 <- agglomerateByRank(tse_vs99, rank = "Genus", onRankOnly = T,
                          na.rm = F)
tse_emu <- agglomerateByRank(tse_emu, rank = "Genus", onRankOnly = T,
                             na.rm = F)
#check number of variants
nrow(tse_dada)
nrow(tse_vs97)
nrow(tse_vs99)
nrow(tse_emu)
```

Next, we convert counts to relative abundance values

```{r, message = F, warning = F, size = "tiny"}
#relabundance
tse_dada <- transformAssay(tse_dada, assay.type = "counts",
                                   method = "relabundance")
tse_vs97 <- transformAssay(tse_vs97, assay.type = "counts",
                                   method = "relabundance")
tse_vs99 <- transformAssay(tse_vs99, assay.type = "counts",
                                   method = "relabundance")
tse_emu <- transformAssay(tse_emu, assay.type = "counts",
                          method = "relabundance")
```

\newpage

Pick five most abundant features

```{r, warning = F, message = F, size = "tiny"}
#get top5 features
top5_dada <- getTopFeatures(tse_dada, top = 5, method = "sum",
                              assay.type = "relabundance")
dada_table <- data.frame(assays(tse_dada)$relabundance)
dada_table <- dada_table %>% rownames_to_column(var = "Genus") %>%
  filter(Genus %in% top5_dada)
kable(dada_table, digits=2) %>%
  kable_styling(latex_options = c("HOLD_position", "striped"), font_size = 11) %>%
  row_spec(0, background = "teal", color = "white")
```

```{r, warning = F, message = F, size = "tiny"}
#get top5 features
top5_vs97 <- getTopFeatures(tse_vs97, top = 5, method = "sum",
                              assay.type = "relabundance")
vs97_table <- data.frame(assays(tse_vs97)$relabundance)
vs97_table <- vs97_table %>% rownames_to_column(var = "Genus") %>%
  filter(Genus %in% top5_vs97)
kable(vs97_table, digits=2) %>%
  kable_styling(latex_options = c("HOLD_position", "striped"), font_size = 11) %>%
  row_spec(0, background = "teal", color = "white")
```

\newpage

```{r, warning = F, message = F, size = "tiny"}
#get top5 features
top5_vs99 <- getTopFeatures(tse_vs99, top = 5, method = "sum",
                              assay.type = "relabundance")
vs99_table <- data.frame(assays(tse_vs99)$relabundance)
vs99_table <- vs99_table %>% rownames_to_column(var = "Genus") %>%
  filter(Genus %in% top5_vs99)
kable(vs99_table, digits=2) %>%
  kable_styling(latex_options = c("HOLD_position", "striped"), font_size = 11) %>%
  row_spec(0, background = "teal", color = "white")
```

```{r, warning = F, message = F, size = "tiny"}
#get top5 features
top5_emu <- getTopFeatures(tse_emu, top = 5, method = "sum",
                              assay.type = "relabundance")
emu_table <- data.frame(assays(tse_emu)$relabundance)
emu_table <- emu_table %>% rownames_to_column(var = "Genus") %>%
  filter(Genus %in% top5_emu)
kable(emu_table, digits=2) %>%
  kable_styling(latex_options = c("HOLD_position", "striped"), font_size = 11) %>%
  row_spec(0, background = "teal", color = "white")
```

For stacked barplots, we create long table, i.e. single column contains all samples

```{r, warning = F, message = F, size = "tiny"}
#transform data to ggplot
dada_long <- dada_table %>% pivot_longer(cols = starts_with("barcode"),
                                         names_to = "Sample",
                                         values_to = "Abundance") %>%
  mutate(Method = "Dada")
#transform data to ggplot
vs97_long <- vs97_table %>% pivot_longer(cols = starts_with("barcode"),
                                         names_to = "Sample",
                                         values_to = "Abundance") %>%
  mutate(Method = "Vsearch97")
#transform data to ggplot
vs99_long <- vs99_table %>% pivot_longer(cols = starts_with("barcode"),
                                         names_to = "Sample",
                                         values_to = "Abundance") %>%
  mutate(Method = "Vsearch99")
#transform data to ggplot
emu_long <- emu_table %>% pivot_longer(cols = starts_with("barcode"),
                                         names_to = "Sample",
                                         values_to = "Abundance") %>%
  mutate(Method = "Emu")
#combine
long_table <- bind_rows(dada_long, vs97_long, vs99_long, emu_long)
```

Plot objects

```{r, warning = F, message = F, size = "tiny"}
#Create stacked barplot
ab_plot <- ggplot(long_table, aes(x = Sample, y = Abundance, fill = Genus)) + 
  geom_bar(stat = "identity", alpha=0.8) + facet_wrap(~Method) +
  theme_pander(base_size = 10) + scale_fill_stata() + theme(axis.text.x =
                                                              element_text(angle = 90))
```

Results side by side

```{r, fig.dim = c(6.5,4), size = "tiny"}
#show plots side by side
ab_plot
```

#### Observations

In this dataset, it is likely that we have pure microbial cultures. However, increased noise is observed with vsearch at 99%, particularly in the barcode02 sample. This discrepancy was initially obscured because phyloseq did not correctly import the taxonomy results, leading to *Microbacter* being mistakenly labeled asÂ *Aeromonas*.
